"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("tns-core-modules/platform");
var file_system_1 = require("tns-core-modules/file-system");
var constants_1 = require("../data/constants");
var di_1 = require("../lib/di");
var xLog = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return di_1.container.xLog.apply(di_1.container, args);
};
var collection = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return di_1.container.collection.apply(di_1.container, args);
};
var snapshotToArray = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return di_1.container.snapshotToArray.apply(di_1.container, args);
};
var I18N = "i18n";
var deviceFullLocale = platform_1.device.language;
var deviceLocale = deviceFullLocale.slice(0, 2);
var VERSIONS_FILE = "versions.json";
var env = {
    deviceFullLocale: deviceFullLocale,
    deviceLocale: deviceLocale,
    localeData: {}
};
var currentApp = file_system_1.knownFolders.currentApp();
var documents = file_system_1.knownFolders.documents();
var appFolder = currentApp.getFolder(I18N);
var documentsFolder = documents.getFolder(I18N);
function checkLocale() {
    return copyVersions()
        .catch(function (err) {
        xLog("copyVersions error", err);
        throw err;
    })
        .then(function () {
        return checkForUpdates();
    })
        .catch(function (err) {
        xLog("checkForUpdates error", err);
    })
        .then(function () {
        return loadLocaleFromFile(env.deviceFullLocale);
    })
        .then(function (localeFromFile) {
        if (localeFromFile) {
            setLocale(env.deviceFullLocale, localeFromFile);
        }
        else {
            return loadLocaleFromFile(env.deviceLocale);
        }
    })
        .then(function (localeFromFile) {
        if (!env.selectedLocale) {
            if (localeFromFile) {
                setLocale(env.deviceLocale, localeFromFile);
            }
            else {
                return loadDefaultLocale();
            }
        }
    })
        .catch(function (err) {
        xLog("checkLocale error", err, err.stack);
        throw err;
    });
}
exports.checkLocale = checkLocale;
function copyVersions() {
    if (!documentsFolder.contains(VERSIONS_FILE)) {
        var appFile = appFolder.getFile(VERSIONS_FILE);
        var documentsFile_1 = documentsFolder.getFile(VERSIONS_FILE);
        return appFile.readText().then(function (fileData) {
            return documentsFile_1.writeText(fileData);
        });
    }
    return Promise.resolve();
}
function loadLocaleFromFile(locale) {
    var fileName = locale + ".json";
    var defaultFileName = locale + ".default.json";
    if (documentsFolder.contains(fileName) || documentsFolder.contains(defaultFileName)) {
        return loadLocaleFromFolder(fileName, defaultFileName, documentsFolder);
    }
    if (appFolder.contains(fileName) || appFolder.contains(defaultFileName)) {
        return loadLocaleFromFolder(fileName, defaultFileName, appFolder);
    }
}
function loadLocaleFromFolder(fileName, defaultFileName, folder) {
    return safeLoadFileFromFolder(fileName, folder)
        .then(function (fileData) {
        if (String(fileData).trim()) {
            return JSON.parse(String(fileData));
        }
        else {
            return safeLoadFileFromFolder(defaultFileName, folder)
                .then(function (defaultData) {
                if (String(defaultData).trim()) {
                    return JSON.parse(String(defaultData));
                }
            });
        }
    });
}
function safeLoadFileFromFolder(fileName, folder) {
    if (folder.contains(fileName)) {
        return folder.getFile(fileName).readText();
    }
    return Promise.resolve('');
}
function loadLocaleFromServer(locale) {
    return collection(I18N).doc(locale)
        .get()
        .then(function (querySnaphot) {
        return snapshotToArray(querySnaphot);
    });
}
function setLocale(locale, data) {
    env.selectedLocale = locale;
    env.localeData = typeof data == "string" ? JSON.parse(data) : data;
}
function loadDefaultLocale() {
    var defaultLocale = "";
    appFolder.eachEntity(function (entity) {
        var name = entity.name;
        var isDefault = name.includes("default");
        if (isDefault) {
            defaultLocale = name.replace(".default.json", "");
        }
        return !isDefault;
    });
    return loadLocaleFromFile(defaultLocale).then(function (fileData) {
        if (fileData) {
            setLocale(defaultLocale, fileData);
            env.defaultLocale = defaultLocale;
        }
    });
}
function checkForUpdates() {
    return Promise.all([
        loadServerVersions(),
        loadLocalVersions(),
    ]).then(function (_a) {
        var localVersions = _a[0], serverVersions = _a[1];
        var locales = [env.deviceLocale, env.deviceFullLocale];
        if (env.defaultLocale) {
            locales.push(env.defaultLocale);
        }
        var versionUpdates = __assign({}, localVersions);
        var updatePromises = [];
        var updated = false;
        for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
            var locale = locales_1[_i];
            if (localVersions[locale] != serverVersions[locale]) {
                versionUpdates[locale] = Math.max(localVersions[locale], serverVersions[locale]);
                updated = true;
                updatePromises.push(updateLocale(locale));
            }
        }
        if (updated) {
            updatePromises.push(writeLocalVersions(versionUpdates));
        }
        return updatePromises;
    });
}
function updateLocale(locale) {
    return loadLocaleFromServer(locale).then(function (serverData) {
        if (locale == env.selectedLocale) {
            env.localeData = serverData;
        }
        return writeLocaleData(locale, serverData);
    });
}
function writeLocaleData(locale, data) {
    var file = documentsFolder.getFile(locale + ".json");
    if (env.defaultLocale == locale) {
        file = documentsFolder.getFile(locale + ".default.json");
    }
    return file.writeText(JSON.stringify(data));
}
function loadLocalVersions() {
    var file = documentsFolder.getFile(VERSIONS_FILE);
    return file.readText().then(function (fileData) {
        if (fileData) {
            return JSON.parse(fileData);
        }
        else {
            return {};
        }
    });
}
function writeLocalVersions(versions) {
    var file = documentsFolder.getFile(VERSIONS_FILE);
    return file.writeText(JSON.stringify(versions));
}
function loadServerVersions() {
    return collection(constants_1.VERSIONS_COLLECTION)
        .doc(I18N)
        .get()
        .then(function (snapshot) {
        return snapshotToArray(snapshot);
    });
}
function localize(key, defaultValue) {
    return String(env.localeData[key] || defaultValue)
        .replace(/\${(.*)}/g, function (_, formatter) {
        if (di_1.container[formatter]) {
            return di_1.container[formatter]();
        }
        return '';
    });
}
exports.localize = localize;
function getLocale() {
    return env.selectedLocale || deviceLocale;
}
exports.getLocale = getLocale;
function getShortLocale() {
    return getLocale().slice(0, 2).toLocaleLowerCase();
}
exports.getShortLocale = getShortLocale;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9jYWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQWlEO0FBQ2pELDREQUEwRjtBQUMxRiwrQ0FBc0Q7QUFDdEQsZ0NBQW9DO0FBRXBDLElBQU0sSUFBSSxHQUFHO0lBQUMsY0FBTztTQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87UUFBUCx5QkFBTzs7SUFBSyxPQUFBLGNBQVMsQ0FBQyxJQUFJLE9BQWQsY0FBUyxFQUFTLElBQUk7QUFBdEIsQ0FBdUIsQ0FBQztBQUNsRCxJQUFNLFVBQVUsR0FBRztJQUFDLGNBQU87U0FBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1FBQVAseUJBQU87O0lBQUssT0FBQSxjQUFTLENBQUMsVUFBVSxPQUFwQixjQUFTLEVBQWUsSUFBSTtBQUE1QixDQUE2QixDQUFDO0FBQzlELElBQU0sZUFBZSxHQUFHO0lBQUMsY0FBTztTQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87UUFBUCx5QkFBTzs7SUFBSyxPQUFBLGNBQVMsQ0FBQyxlQUFlLE9BQXpCLGNBQVMsRUFBb0IsSUFBSTtBQUFqQyxDQUFrQyxDQUFDO0FBa0J4RSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUM7QUFDcEIsSUFBTSxnQkFBZ0IsR0FBRyxpQkFBTSxDQUFDLFFBQVEsQ0FBQztBQUN6QyxJQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2xELElBQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQztBQUV0QyxJQUFNLEdBQUcsR0FBUTtJQUNiLGdCQUFnQixrQkFBQTtJQUNoQixZQUFZLGNBQUE7SUFDWixVQUFVLEVBQUUsRUFBRTtDQUNqQixDQUFDO0FBRUYsSUFBTSxVQUFVLEdBQW1CLDBCQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDN0QsSUFBTSxTQUFTLEdBQW1CLDBCQUFZLENBQUMs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RCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQztTQUM3QyxPQUFPLENBQUMsV0FBVyxFQUFFLFVBQUMsQ0FBQyxFQUFFLFNBQVM7UUFDL0IsSUFBSSxjQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxjQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtTQUNoQztRQUNELE9BQU8sRUFBRSxDQUFBO0lBQ2IsQ0FBQyxDQUFDLENBQUE7QUFDVixDQUFDO0FBUkQsNEJBUUM7QUFFRCxTQUFnQixTQUFTO0lBQ3JCLE9BQU8sR0FBRyxDQUFDLGNBQWMsSUFBSSxZQUFZLENBQUE7QUFDN0MsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsY0FBYztJQUMxQixPQUFPLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUN2RCxDQUFDO0FBRkQsd0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2RldmljZX0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIjtcbmltcG9ydCB7Rm9sZGVyLCBrbm93bkZvbGRlcnMsIEZpbGUsIEZpbGVTeXN0ZW1FbnRpdHl9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2ZpbGUtc3lzdGVtXCI7XG5pbXBvcnQge1ZFUlNJT05TX0NPTExFQ1RJT059IGZyb20gXCIuLi9kYXRhL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtjb250YWluZXJ9IGZyb20gXCIuLi9saWIvZGlcIjtcblxuY29uc3QgeExvZyA9ICguLi5hcmdzKSA9PiBjb250YWluZXIueExvZyguLi5hcmdzKTtcbmNvbnN0IGNvbGxlY3Rpb24gPSAoLi4uYXJncykgPT4gY29udGFpbmVyLmNvbGxlY3Rpb24oLi4uYXJncyk7XG5jb25zdCBzbmFwc2hvdFRvQXJyYXkgPSAoLi4uYXJncykgPT4gY29udGFpbmVyLnNuYXBzaG90VG9BcnJheSguLi5hcmdzKTtcblxuaW50ZXJmYWNlIEVOViB7XG4gICAgZGV2aWNlTG9jYWxlOiBzdHJpbmcsXG4gICAgZGV2aWNlRnVsbExvY2FsZTogc3RyaW5nLFxuICAgIGRlZmF1bHRMb2NhbGU/OiBzdHJpbmcsXG4gICAgc2VsZWN0ZWRMb2NhbGU/OiBzdHJpbmcsXG4gICAgbG9jYWxlRGF0YTogTG9jYWxlLFxufVxuXG5pbnRlcmZhY2UgTG9jYWxlIHtcbiAgICBbaW5kZXg6IHN0cmluZ106IHN0cmluZyxcbn1cblxuaW50ZXJmYWNlIFZlcnNpb25zIHtcbiAgICBbaW5kZXg6IHN0cmluZ106IG51bWJlclxufVxuXG5jb25zdCBJMThOID0gXCJpMThuXCI7XG5jb25zdCBkZXZpY2VGdWxsTG9jYWxlID0gZGV2aWNlLmxhbmd1YWdlO1xuY29uc3QgZGV2aWNlTG9jYWxlID0gZGV2aWNlRnVsbExvY2FsZS5zbGljZSgwLCAyKTtcbmNvbnN0IFZFUlNJT05TX0ZJTEUgPSBcInZlcnNpb25zLmpzb25cIjtcblxuY29uc3QgZW52OiBFTlYgPSB7XG4gICAgZGV2aWNlRnVsbExvY2FsZSxcbiAgICBkZXZpY2VMb2NhbGUsXG4gICAgbG9jYWxlRGF0YToge31cbn07XG5cbmNvbnN0IGN1cnJlbnRBcHA6IEZvbGRlciA9IDxGb2xkZXI+a25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKTtcbmNvbnN0IGRvY3VtZW50czogRm9sZGVyID0gPEZvbGRlcj5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XG5jb25zdCBhcHBGb2xkZXI6IEZvbGRlciA9IDxGb2xkZXI+Y3VycmVudEFwcC5nZXRGb2xkZXIoSTE4Tik7XG5jb25zdCBkb2N1bWVudHNGb2xkZXI6IEZvbGRlciA9IDxGb2xkZXI+ZG9jdW1lbnRzLmdldEZvbGRlcihJMThOKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTG9jYWxlKCkge1xuICAgIHJldHVybiBjb3B5VmVyc2lvbnMoKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIHhMb2coXG4gICAgICAgICAgICAgICAgXCJjb3B5VmVyc2lvbnMgZXJyb3JcIixcbiAgICAgICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tGb3JVcGRhdGVzKClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICB4TG9nKFxuICAgICAgICAgICAgICAgIFwiY2hlY2tGb3JVcGRhdGVzIGVycm9yXCIsXG4gICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbG9hZExvY2FsZUZyb21GaWxlKGVudi5kZXZpY2VGdWxsTG9jYWxlKVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihsb2NhbGVGcm9tRmlsZSA9PiB7XG4gICAgICAgICAgICBpZiAobG9jYWxlRnJvbUZpbGUpIHtcbiAgICAgICAgICAgICAgICBzZXRMb2NhbGUoZW52LmRldmljZUZ1bGxMb2NhbGUsIGxvY2FsZUZyb21GaWxlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZExvY2FsZUZyb21GaWxlKGVudi5kZXZpY2VMb2NhbGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGxvY2FsZUZyb21GaWxlID0+IHtcbiAgICAgICAgICAgIGlmICghZW52LnNlbGVjdGVkTG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZUZyb21GaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExvY2FsZShlbnYuZGV2aWNlTG9jYWxlLCBsb2NhbGVGcm9tRmlsZSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9hZERlZmF1bHRMb2NhbGUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICB4TG9nKFxuICAgICAgICAgICAgICAgIFwiY2hlY2tMb2NhbGUgZXJyb3JcIixcbiAgICAgICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICAgICAgZXJyLnN0YWNrLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSlcbn1cblxuZnVuY3Rpb24gY29weVZlcnNpb25zKCkge1xuICAgIGlmICghZG9jdW1lbnRzRm9sZGVyLmNvbnRhaW5zKFZFUlNJT05TX0ZJTEUpKSB7XG4gICAgICAgIGNvbnN0IGFwcEZpbGUgPSA8RmlsZT5hcHBGb2xkZXIuZ2V0RmlsZShWRVJTSU9OU19GSUxFKTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzRmlsZSA9IDxGaWxlPmRvY3VtZW50c0ZvbGRlci5nZXRGaWxlKFZFUlNJT05TX0ZJTEUpO1xuICAgICAgICByZXR1cm4gYXBwRmlsZS5yZWFkVGV4dCgpLnRoZW4oZmlsZURhdGEgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50c0ZpbGUud3JpdGVUZXh0KGZpbGVEYXRhKVxuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZUZyb21GaWxlKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBgJHtsb2NhbGV9Lmpzb25gO1xuICAgIGNvbnN0IGRlZmF1bHRGaWxlTmFtZSA9IGAke2xvY2FsZX0uZGVmYXVsdC5qc29uYDtcbiAgICBpZiAoZG9jdW1lbnRzRm9sZGVyLmNvbnRhaW5zKGZpbGVOYW1lKSB8fCBkb2N1bWVudHNGb2xkZXIuY29udGFpbnMoZGVmYXVsdEZpbGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gbG9hZExvY2FsZUZyb21Gb2xkZXIoXG4gICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgIGRlZmF1bHRGaWxlTmFtZSxcbiAgICAgICAgICAgIGRvY3VtZW50c0ZvbGRlcixcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoYXBwRm9sZGVyLmNvbnRhaW5zKGZpbGVOYW1lKSB8fCBhcHBGb2xkZXIuY29udGFpbnMoZGVmYXVsdEZpbGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gbG9hZExvY2FsZUZyb21Gb2xkZXIoXG4gICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgIGRlZmF1bHRGaWxlTmFtZSxcbiAgICAgICAgICAgIGFwcEZvbGRlcixcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZUZyb21Gb2xkZXIoZmlsZU5hbWU6IHN0cmluZywgZGVmYXVsdEZpbGVOYW1lOiBzdHJpbmcsIGZvbGRlcjogRm9sZGVyKSB7XG4gICAgcmV0dXJuIHNhZmVMb2FkRmlsZUZyb21Gb2xkZXIoZmlsZU5hbWUsIGZvbGRlcilcbiAgICAgICAgLnRoZW4oZmlsZURhdGEgPT4ge1xuICAgICAgICAgICAgaWYgKFN0cmluZyhmaWxlRGF0YSkudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoU3RyaW5nKGZpbGVEYXRhKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhZmVMb2FkRmlsZUZyb21Gb2xkZXIoZGVmYXVsdEZpbGVOYW1lLCBmb2xkZXIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGRlZmF1bHREYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoZGVmYXVsdERhdGEpLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKFN0cmluZyhkZWZhdWx0RGF0YSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG59XG5cbmZ1bmN0aW9uIHNhZmVMb2FkRmlsZUZyb21Gb2xkZXIoZmlsZU5hbWU6IHN0cmluZywgZm9sZGVyOiBGb2xkZXIpIHtcbiAgICBpZiAoZm9sZGVyLmNvbnRhaW5zKGZpbGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gZm9sZGVyLmdldEZpbGUoZmlsZU5hbWUpLnJlYWRUZXh0KClcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJylcbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZUZyb21TZXJ2ZXIobG9jYWxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbihJMThOKS5kb2MobG9jYWxlKVxuICAgICAgICAuZ2V0KClcbiAgICAgICAgLnRoZW4oKHF1ZXJ5U25hcGhvdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNuYXBzaG90VG9BcnJheShxdWVyeVNuYXBob3QpXG4gICAgICAgIH0pXG59XG5cbmZ1bmN0aW9uIHNldExvY2FsZShsb2NhbGU6IHN0cmluZywgZGF0YTogc3RyaW5nKSB7XG4gICAgZW52LnNlbGVjdGVkTG9jYWxlID0gbG9jYWxlO1xuICAgIGVudi5sb2NhbGVEYXRhID0gdHlwZW9mIGRhdGEgPT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2UoZGF0YSkgOiBkYXRhO1xufVxuXG5mdW5jdGlvbiBsb2FkRGVmYXVsdExvY2FsZSgpIHtcbiAgICBsZXQgZGVmYXVsdExvY2FsZSA9IFwiXCI7XG4gICAgYXBwRm9sZGVyLmVhY2hFbnRpdHkoKGVudGl0eTogRmlsZVN5c3RlbUVudGl0eSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gZW50aXR5Lm5hbWU7XG4gICAgICAgIGNvbnN0IGlzRGVmYXVsdCA9IG5hbWUuaW5jbHVkZXMoXCJkZWZhdWx0XCIpO1xuICAgICAgICBpZiAoaXNEZWZhdWx0KSB7XG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlID0gbmFtZS5yZXBsYWNlKFwiLmRlZmF1bHQuanNvblwiLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWlzRGVmYXVsdFxuICAgIH0pO1xuICAgIHJldHVybiBsb2FkTG9jYWxlRnJvbUZpbGUoZGVmYXVsdExvY2FsZSkudGhlbihmaWxlRGF0YSA9PiB7XG4gICAgICAgIGlmIChmaWxlRGF0YSkge1xuICAgICAgICAgICAgc2V0TG9jYWxlKGRlZmF1bHRMb2NhbGUsIGZpbGVEYXRhKTtcbiAgICAgICAgICAgIGVudi5kZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgW1xuICAgICAgICAgICAgbG9hZFNlcnZlclZlcnNpb25zKCksXG4gICAgICAgICAgICBsb2FkTG9jYWxWZXJzaW9ucygpLFxuICAgICAgICBdXG4gICAgKS50aGVuKChbbG9jYWxWZXJzaW9ucywgc2VydmVyVmVyc2lvbnNdKSA9PiB7XG4gICAgICAgIGNvbnN0IGxvY2FsZXMgPSBbZW52LmRldmljZUxvY2FsZSwgZW52LmRldmljZUZ1bGxMb2NhbGVdO1xuICAgICAgICBpZiAoZW52LmRlZmF1bHRMb2NhbGUpIHtcbiAgICAgICAgICAgIGxvY2FsZXMucHVzaChlbnYuZGVmYXVsdExvY2FsZSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2ZXJzaW9uVXBkYXRlcyA9IHsgLi4ubG9jYWxWZXJzaW9ucyB9O1xuICAgICAgICBjb25zdCB1cGRhdGVQcm9taXNlcyA9IFtdO1xuICAgICAgICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGxvY2FsZSBvZiBsb2NhbGVzKSB7XG4gICAgICAgICAgICBpZiAobG9jYWxWZXJzaW9uc1tsb2NhbGVdICE9IHNlcnZlclZlcnNpb25zW2xvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uVXBkYXRlc1tsb2NhbGVdID0gTWF0aC5tYXgobG9jYWxWZXJzaW9uc1tsb2NhbGVdLCBzZXJ2ZXJWZXJzaW9uc1tsb2NhbGVdKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1cGRhdGVQcm9taXNlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVMb2NhbGUobG9jYWxlKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICAgICAgdXBkYXRlUHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgICB3cml0ZUxvY2FsVmVyc2lvbnMoXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb25VcGRhdGVzLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXBkYXRlUHJvbWlzZXNcbiAgICB9KVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbG9hZExvY2FsZUZyb21TZXJ2ZXIobG9jYWxlKS50aGVuKHNlcnZlckRhdGEgPT4ge1xuICAgICAgICBpZiAobG9jYWxlID09IGVudi5zZWxlY3RlZExvY2FsZSkge1xuICAgICAgICAgICAgZW52LmxvY2FsZURhdGEgPSBzZXJ2ZXJEYXRhXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlTG9jYWxlRGF0YShsb2NhbGUsIHNlcnZlckRhdGEpXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gd3JpdGVMb2NhbGVEYXRhKGxvY2FsZTogc3RyaW5nLCBkYXRhKSB7XG4gICAgbGV0IGZpbGUgPSA8RmlsZT5kb2N1bWVudHNGb2xkZXIuZ2V0RmlsZShgJHtsb2NhbGV9Lmpzb25gKTtcbiAgICBpZiAoZW52LmRlZmF1bHRMb2NhbGUgPT0gbG9jYWxlKSB7XG4gICAgICAgIGZpbGUgPSA8RmlsZT5kb2N1bWVudHNGb2xkZXIuZ2V0RmlsZShgJHtsb2NhbGV9LmRlZmF1bHQuanNvbmApO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZS53cml0ZVRleHQoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgKVxufVxuXG5mdW5jdGlvbiBsb2FkTG9jYWxWZXJzaW9ucygpIHtcbiAgICBjb25zdCBmaWxlID0gPEZpbGU+ZG9jdW1lbnRzRm9sZGVyLmdldEZpbGUoVkVSU0lPTlNfRklMRSk7XG4gICAgcmV0dXJuIGZpbGUucmVhZFRleHQoKS50aGVuKGZpbGVEYXRhID0+IHtcbiAgICAgICAgaWYgKGZpbGVEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShmaWxlRGF0YSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gd3JpdGVMb2NhbFZlcnNpb25zKHZlcnNpb25zOiBWZXJzaW9ucykge1xuICAgIGNvbnN0IGZpbGUgPSA8RmlsZT5kb2N1bWVudHNGb2xkZXIuZ2V0RmlsZShWRVJTSU9OU19GSUxFKTtcbiAgICByZXR1cm4gZmlsZS53cml0ZVRleHQoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgdmVyc2lvbnNcbiAgICAgICAgKVxuICAgIClcbn1cblxuZnVuY3Rpb24gbG9hZFNlcnZlclZlcnNpb25zKCkge1xuICAgIHJldHVybiBjb2xsZWN0aW9uKFZFUlNJT05TX0NPTExFQ1RJT04pXG4gICAgICAgIC5kb2MoSTE4TilcbiAgICAgICAgLmdldCgpXG4gICAgICAgIC50aGVuKHNuYXBzaG90ID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzbmFwc2hvdFRvQXJyYXkoc25hcHNob3QpXG4gICAgICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGl6ZShrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFN0cmluZyhlbnYubG9jYWxlRGF0YVtrZXldIHx8IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgLnJlcGxhY2UoL1xcJHsoLiopfS9nLCAoXywgZm9ybWF0dGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyW2Zvcm1hdHRlcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyW2Zvcm1hdHRlcl0oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUoKSB7XG4gICAgcmV0dXJuIGVudi5zZWxlY3RlZExvY2FsZSB8fCBkZXZpY2VMb2NhbGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNob3J0TG9jYWxlKCkge1xuICAgIHJldHVybiBnZXRMb2NhbGUoKS5zbGljZSgwLCAyKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xufSJdfQ==